<?php

namespace App\Http\Controllers\Client;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\Order;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

class OrderController extends Controller
{
    public function store(Request $request)

{
    try {
        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p
        if (!Auth::check()) {
            return response()->json(['status' => 'error', 'message' => 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ mua h√†ng!'], 401);
        }

        // Ki·ªÉm tra ph∆∞∆°ng th·ª©c request c√≥ ƒë√∫ng l√† POST kh√¥ng
        if (!$request->isMethod('post')) {
            return response()->json(['status' => 'error', 'message' => 'Ph∆∞∆°ng th·ª©c kh√¥ng h·ª£p l·ªá!'], 405);
        }

        // Ki·ªÉm tra CSRF Token
        if (!$request->hasHeader('X-CSRF-TOKEN')) {
            return response()->json(['status' => 'error', 'message' => 'Thi·∫øu CSRF Token!'], 419);
        }

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        $validatedData = $request->validate([
            'product_id' => 'required|integer|exists:products,id',
            'product_name' => 'required|string|max:255',
            'color' => 'required|string|max:50',
            'size' => 'required|string|max:10',
            'quantity' => 'required|integer|min:1',
            'price' => 'required|numeric|min:0',
            'payment_method' => 'required|string|max:50',
        ]);

        // üõë T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
        $quantity = (int) $validatedData['quantity'];
        $price_per_item = (float) $validatedData['price'];
        $total_price = $quantity * $price_per_item; // ‚úÖ T·ªïng gi√° khi mua s·ªë l∆∞·ª£ng l·ªõn

        // üõë Ghi log ki·ªÉm tra gi√° tr·ªã tr∆∞·ªõc khi l∆∞u
        Log::info("ƒê·∫∑t h√†ng - S·∫£n ph·∫©m ID: {$validatedData['product_id']} - S·ªë l∆∞·ª£ng: $quantity - T·ªïng gi√°: $total_price");

        // Th√™m user_id v√† m√£ ƒë∆°n h√†ng v√†o d·ªØ li·ªáu
        $validatedData['user_id'] = Auth::id();
        $validatedData['order_code'] = 'OD' . strtoupper(uniqid());
        $validatedData['price'] = $total_price; // ‚úÖ L∆∞u t·ªïng gi√° tr·ªã v√†o c·ªôt `price`

        // L∆∞u v√†o CSDL
        $order = Order::create($validatedData);

        return response()->json([
            'status' => 'success',
            'message' => 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!',
            'order_code' => $order->order_code,
            'redirect' => url('/orders/' . $order->id)
        ]);

    } catch (\Exception $e) {
        Log::error('L·ªói l∆∞u ƒë∆°n h√†ng: ' . $e->getMessage());
        return response()->json([
            'status' => 'error',
            'message' => 'L·ªói h·ªá th·ªëng! Ki·ªÉm tra logs ƒë·ªÉ bi·∫øt chi ti·∫øt.'
        ], 500);
    }
}

    


    public function index() {
        $user = Auth::user();
        $orders = Order::where('user_id', $user->id)->orderBy('created_at', 'desc')->paginate(10);
        return view('client.pages.order', compact('user', 'orders'));
    }

    
    public function checkPaymentStatus(Request $request)
    {
        $productId = $request->query('product_id');

        if (!$productId) {
            return response()->json(['error' => 'Thi·∫øu product_id'], 400);
        }

        // Ki·ªÉm tra xem c√≥ ƒë∆°n h√†ng n√†o v·ªõi product_id t∆∞∆°ng ·ª©ng hay kh√¥ng
        $order = Order::where('product_id', $productId)->first();

        if (!$order) {
            return response()->json(['error' => 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'], 404);
        }

        return response()->json([
            'payment_status' => $order->payment_status,
            'order_code' => $order->order_code
        ]);
    }


    public function show($id)
{
    $order = Order::where('id', $id)
                ->where('user_id', Auth::id())
                ->with('colorName', 'sizeName') // ‚úÖ L·∫•y t√™n thay v√¨ ID
                ->first();

    if (!$order) {
        return redirect()->route('order')->with('error', 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn xem!');
    }

    return view('client.pages.order_detail', compact('order'));
}

    



}

